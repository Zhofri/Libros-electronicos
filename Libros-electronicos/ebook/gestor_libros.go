package ebook

import (
	"errors"
	"fmt"
)

// GestorLibros administra la colecci√≥n de libros electr√≥nicos
type GestorLibros struct {
	libros []Libro
}

// NuevoGestorLibros crea una nueva instancia del gestor
func NuevoGestorLibros() *GestorLibros {
	return &GestorLibros{
		libros: make([]Libro, 0),
	}
}

// AgregarLibro a√±ade un libro a la colecci√≥n
func (g *GestorLibros) AgregarLibro(libro Libro) {
	g.libros = append(g.libros, libro)
	fmt.Println("‚úÖ Libro agregado correctamente.")
}

// BuscarLibroPorTitulo busca un libro por su t√≠tulo
func (g *GestorLibros) BuscarLibroPorTitulo(titulo string) (*Libro, error) {
	for i := range g.libros {
		if g.libros[i].GetTitulo() == titulo {
			return &g.libros[i], nil
		}
	}
	return nil, errors.New("‚ùå libro no encontrado con ese t√≠tulo")
}

// EliminarLibroPorTitulo elimina un libro por su t√≠tulo
func (g *GestorLibros) EliminarLibroPorTitulo(titulo string) error {
	for i, libro := range g.libros {
		if libro.GetTitulo() == titulo {
			g.libros = append(g.libros[:i], g.libros[i+1:]...)
			fmt.Println("üóëÔ∏è Libro eliminado correctamente.")
			return nil
		}
	}
	return errors.New("‚ùå no se encontr√≥ el libro para eliminar")
}

// ListarLibros muestra todos los libros en la colecci√≥n
func (g *GestorLibros) ListarLibros() {
	if len(g.libros) == 0 {
		fmt.Println("üì≠ No hay libros registrados.")
		return
	}
	fmt.Println("üìö Lista de libros registrados:")
	for _, libro := range g.libros {
		fmt.Printf("- %s (%s) [%s]\n", libro.GetTitulo(), libro.GetAutor(), libro.GetCategoria())
	}
}
