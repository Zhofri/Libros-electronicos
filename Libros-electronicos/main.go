package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/Zhofri/Libros-electronicos/ebook"
	"github.com/Zhofri/Libros-electronicos/user"
)

var lector = bufio.NewReader(os.Stdin)

func main() {
	fmt.Println("üìö Bienvenido al Sistema de Gesti√≥n de Libros Electr√≥nicos üìö")

	gestorUsuarios := user.NuevoGestorUsuarios()
	gestorLibros := ebook.NuevoGestorLibros()

	for {
		fmt.Println("\nSelecciona una opci√≥n:")
		fmt.Println("1. Registrar usuario")
		fmt.Println("2. Iniciar sesi√≥n")
		fmt.Println("3. Salir")

		opcion := leerEntrada("Opci√≥n")

		switch opcion {
		case "1":
			registrarUsuario(gestorUsuarios)
		case "2":
			usuario, err := login(gestorUsuarios)
			if err != nil {
				fmt.Println(err)
				continue
			}
			fmt.Printf("\nüéâ ¬°Bienvenido %s!\n", usuario.GetNombre())
			menuUsuario(usuario, gestorLibros)
		case "3":
			fmt.Println("üëã Hasta luego.")
			return
		default:
			fmt.Println("‚ùå Opci√≥n no v√°lida.")
		}
	}
}

func registrarUsuario(gestor *user.GestorUsuarios) {
	nombre := leerEntrada("Nombre")
	correo := leerEntrada("Correo")
	contra := leerEntrada("Contrase√±a")
	//rol := leerEntrada("Rol (admin/usuario)")

	u, err := user.NuevoUsuario(nombre, correo, contra, "user") // Asignamos rol "usuario" por defecto
	// Si se desea implementar roles, se puede agregar l√≥gica para asignar "admin" o "usuario"		
	if err != nil {
		fmt.Println("‚ùå Error:", err)
		return
	}

	err = gestor.RegistrarUsuario(*u)
	if err != nil {
		fmt.Println("‚ùå Error:", err)
	}
}

func login(gestor *user.GestorUsuarios) (*user.Usuario, error) {
	correo := leerEntrada("Correo")
	contra := leerEntrada("Contrase√±a")

	u, err := gestor.AutenticarUsuario(correo, contra)
	if err != nil {
		return nil, err
	}
	return u, nil
}

func menuUsuario(u *user.Usuario, gestorLibros *ebook.GestorLibros) {
	for {
		fmt.Println("\n--- Men√∫ de Usuario ---")
		fmt.Println("1. Agregar libro")
		fmt.Println("2. Listar libros")
		fmt.Println("3. Buscar libro por t√≠tulo")
		fmt.Println("4. Eliminar libro por t√≠tulo")
		fmt.Println("5. Cerrar sesi√≥n")

		opcion := leerEntrada("Opci√≥n")

		switch opcion {
		case "1":
			titulo := leerEntrada("T√≠tulo")
			autor := leerEntrada("Autor")
			//isbn := leerEntrada("ISBN")
			categoria := leerEntrada("Categor√≠a")
			ruta := leerEntrada("Ruta del archivo")

			
			libro, err := ebook.NuevoLibro(titulo, autor, categoria, ruta)
			if err != nil {
				fmt.Println("‚ùå Error:", err)
				continue
			}
			gestorLibros.AgregarLibro(*libro)

		case "2":
			gestorLibros.ListarLibros()

		case "3":
			titulo := leerEntrada("T√≠tulo a buscar")
			libro, err := gestorLibros.BuscarLibroPorTitulo(titulo)
			if err != nil {
				fmt.Println("‚ùå", err)
			} else {
				fmt.Printf("üîç Libro encontrado: %s (%s) - %s\n", libro.GetTitulo(), libro.GetAutor(), libro.GetCategoria())
			}

		case "4":
			titulo := leerEntrada("T√≠tulo del libro a eliminar")
			err := gestorLibros.EliminarLibroPorTitulo(titulo)
			if err != nil {
				fmt.Println("‚ùå", err)
			}

		case "5":
			fmt.Println("üîí Cerrando sesi√≥n...")
			return

		default:
			fmt.Println("‚ùå Opci√≥n no v√°lida.")
		}
	}
}

func leerEntrada(campo string) string {
	fmt.Printf("Ingrese %s: ", campo)
	texto, _ := lector.ReadString('\n')
	return strings.TrimSpace(texto)
}
